{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dipesh goel\\\\OneDrive - iitkgp.ac.in\\\\Projects\\\\Random_Quote\\\\Frontend\\\\src\\\\components\\\\ThirdPartyQuoteDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuoteDisplay = () => {\n  _s();\n  const [quoteData, setQuoteData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\n  const [firstQuoteFetched, setFirstQuoteFetched] = useState(false); // Track whether the first quote is fetched\n\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []); // Fetch the random quote when the component mounts\n\n  const fetchRandomQuote = () => {\n    setLoading(true); // Set loading to true when fetching data\n    // Fetch data from the backend server\n    axios.get('http://localhost:5050/quote').then(response => {\n      setQuoteData(response.data);\n      setLoading(false); // Set loading to false when data is received\n    }).catch(error => {\n      console.error('Error fetching quote:', error);\n      setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\n    });\n  };\n\n  const getRandomQuote = () => {\n    if (quoteData.length === 0) return null;\n    const randomIndex = Math.floor(Math.random() * quoteData.length);\n    return quoteData[randomIndex];\n  };\n  const handleGetRandomQuote = () => {\n    if (firstQuoteFetched) {\n      // If the first quote is fetched, get another quote and update randomQuote\n      setRandomQuote(getRandomQuote());\n    } else {\n      // If the first quote is not fetched, fetch the first quote\n      setRandomQuote(getRandomQuote());\n      setFirstQuoteFetched(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Random Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : quoteData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quotes found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [randomQuote ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Quote\",\n          children: randomQuote.quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"Author\",\n          children: [\"- \", randomQuote.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Click the button to get a random quote.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 55\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"GetQuoteButton\",\n        onClick: handleGetRandomQuote,\n        children: firstQuoteFetched && randomQuote ? 'Get Another Quote' : 'Get Quote'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(QuoteDisplay, \"6kIL1KkghyO31ROJ0oa9QitpESA=\");\n_c = QuoteDisplay;\nexport default ThirQuoteDisplay;\nvar _c;\n$RefreshReg$(_c, \"QuoteDisplay\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","QuoteDisplay","_s","quoteData","setQuoteData","loading","setLoading","randomQuote","setRandomQuote","firstQuoteFetched","setFirstQuoteFetched","fetchRandomQuote","get","then","response","data","catch","error","console","getRandomQuote","length","randomIndex","Math","floor","random","handleGetRandomQuote","children","fileName","_jsxFileName","lineNumber","columnNumber","className","quote","author","onClick","_c","ThirQuoteDisplay","$RefreshReg$"],"sources":["C:/Users/Dipesh goel/OneDrive - iitkgp.ac.in/Projects/Random_Quote/Frontend/src/components/ThirdPartyQuoteDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst QuoteDisplay = () => {\r\n  const [quoteData, setQuoteData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\r\n  const [firstQuoteFetched, setFirstQuoteFetched] = useState(false); // Track whether the first quote is fetched\r\n\r\n  useEffect(() => {\r\n      fetchRandomQuote();\r\n    }, []); // Fetch the random quote when the component mounts\r\n\r\n  const fetchRandomQuote = () => {\r\n    setLoading(true); // Set loading to true when fetching data\r\n    // Fetch data from the backend server\r\n    axios\r\n      .get('http://localhost:5050/quote')\r\n      .then((response) => {\r\n        setQuoteData(response.data);\r\n        setLoading(false);  // Set loading to false when data is received\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching quote:', error);\r\n        setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\r\n      });\r\n  };\r\n\r\n  const getRandomQuote = () => {\r\n      if (quoteData.length === 0) return null;\r\n      const randomIndex = Math.floor(Math.random() * quoteData.length);\r\n      return quoteData[randomIndex];\r\n  };\r\n\r\n  const handleGetRandomQuote = () => {\r\n    if (firstQuoteFetched) {\r\n      // If the first quote is fetched, get another quote and update randomQuote\r\n      setRandomQuote(getRandomQuote());\r\n    } else {\r\n      // If the first quote is not fetched, fetch the first quote\r\n      setRandomQuote(getRandomQuote());\r\n      setFirstQuoteFetched(true);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Random Quote</h3>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : quoteData.length === 0 ? (\r\n        <p>No quotes found.</p>\r\n      ) : (\r\n        <>\r\n          {randomQuote ? (\r\n            <>\r\n              <h4 className='Quote'>{randomQuote.quote}</h4>\r\n              <p className='Author'>- {randomQuote.author}</p>\r\n            </>\r\n          ) : (\r\n            <p>Click the button to get a random quote.<br/></p>\r\n          )}\r\n          <button className=\"GetQuoteButton\" onClick={handleGetRandomQuote}>\r\n            {firstQuoteFetched  && randomQuote ? 'Get Another Quote' : 'Get Quote'}\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThirQuoteDisplay;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}