{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dipesh goel\\\\OneDrive - iitkgp.ac.in\\\\Projects\\\\Random_Quote\\\\Frontend\\\\src\\\\components\\\\QuoteDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuoteDisplay = () => {\n  _s();\n  const [quoteData, setQuoteData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []); // Fetch the random quote when the component mounts\n\n  const fetchRandomQuote = () => {\n    setLoading(true); // Set loading to true when fetching data\n    // Fetch data from the backend server\n    axios.get('http://localhost:5050/quote').then(response => {\n      setQuoteData(response.data);\n      setLoading(false); // Set loading to false when data is received\n    }).catch(error => {\n      console.error('Error fetching quote:', error);\n      setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\n    });\n  };\n\n  const getRandomQuote = () => {\n    if (quoteData.length === 0) return null;\n    const randomIndex = Math.floor(Math.random() * quoteData.length);\n    return quoteData[randomIndex];\n  };\n  const handleGetRandomQuote = () => {\n    if (firstQuoteFetched) {\n      // If the first quote is fetched, get another quote and update randomQuote\n      setRandomQuote(getRandomQuote());\n    } else {\n      // If the first quote is not fetched, fetch the first quote\n      fetchRandomQuote();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Random Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : quoteData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quotes found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : randomQuote ?\n    /*#__PURE__*/\n    // Only display the quote if randomQuote has data\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: randomQuote.quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"- \", randomQuote.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetRandomQuote,\n      children: \"Get Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) // Show button to fetch the first random quote\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(QuoteDisplay, \"BEANN/XjlfXvrkM4geMzSg5rIVw=\");\n_c = QuoteDisplay;\nexport default QuoteDisplay;\nvar _c;\n$RefreshReg$(_c, \"QuoteDisplay\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","QuoteDisplay","_s","quoteData","setQuoteData","loading","setLoading","randomQuote","setRandomQuote","quote","setQuote","author","setAuthor","fetchRandomQuote","get","then","response","data","catch","error","console","getRandomQuote","length","randomIndex","Math","floor","random","handleGetRandomQuote","firstQuoteFetched","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dipesh goel/OneDrive - iitkgp.ac.in/Projects/Random_Quote/Frontend/src/components/QuoteDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst QuoteDisplay = () => {\r\n  const [quoteData, setQuoteData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\r\n  const [quote, setQuote] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n\r\n  useEffect(() => {\r\n      fetchRandomQuote();\r\n    }, []); // Fetch the random quote when the component mounts\r\n\r\n  const fetchRandomQuote = () => {\r\n    setLoading(true); // Set loading to true when fetching data\r\n    // Fetch data from the backend server\r\n    axios.get('http://localhost:5050/quote')\r\n      .then((response) => {\r\n        setQuoteData(response.data);\r\n        setLoading(false);  // Set loading to false when data is received\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching quote:', error);\r\n        setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\r\n      });\r\n  };\r\n\r\n  const getRandomQuote = () => {\r\n      if (quoteData.length === 0) return null;\r\n      const randomIndex = Math.floor(Math.random() * quoteData.length);\r\n      return quoteData[randomIndex];\r\n  };\r\n\r\n  const handleGetRandomQuote = () => {\r\n    if (firstQuoteFetched) {\r\n      // If the first quote is fetched, get another quote and update randomQuote\r\n      setRandomQuote(getRandomQuote());\r\n    } else {\r\n      // If the first quote is not fetched, fetch the first quote\r\n      fetchRandomQuote();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Random Quote</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : quoteData.length === 0 ? (\r\n        <p>No quotes found.</p>\r\n      ) : randomQuote ? (               // Only display the quote if randomQuote has data\r\n        <>\r\n          <p>{randomQuote.quote}</p>\r\n          <p>- {randomQuote.author}</p>\r\n        </>\r\n      ) : (\r\n        <button onClick={handleGetRandomQuote}>Get Quote</button> // Show button to fetch the first random quote\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZkB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAEV,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;IAC7BP,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB;IACAV,KAAK,CAACkB,GAAG,CAAC,6BAA6B,CAAC,CACrCC,IAAI,CAAEC,QAAQ,IAAK;MAClBZ,YAAY,CAACY,QAAQ,CAACC,IAAI,CAAC;MAC3BX,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cb,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;EACN,CAAC;;EAED,MAAMe,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIlB,SAAS,CAACmB,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IACvC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvB,SAAS,CAACmB,MAAM,CAAC;IAChE,OAAOnB,SAAS,CAACoB,WAAW,CAAC;EACjC,CAAC;EAED,MAAMI,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIC,iBAAiB,EAAE;MACrB;MACApB,cAAc,CAACa,cAAc,CAAC,CAAC,CAAC;IAClC,CAAC,MAAM;MACL;MACAR,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC;EAGD,oBACEf,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAA+B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpB5B,OAAO,gBACNP,OAAA;MAAA+B,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACf9B,SAAS,CAACmB,MAAM,KAAK,CAAC,gBACxBxB,OAAA;MAAA+B,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACrB1B,WAAW;IAAA;IAAmB;IAChCT,OAAA,CAAAE,SAAA;MAAA6B,QAAA,gBACE/B,OAAA;QAAA+B,QAAA,EAAItB,WAAW,CAACE;MAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BnC,OAAA;QAAA+B,QAAA,GAAG,IAAE,EAACtB,WAAW,CAACI,MAAM;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eAC7B,CAAC,gBAEHnC,OAAA;MAAQoC,OAAO,EAAEP,oBAAqB;MAAAE,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,CAAC;IAC3D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA3DID,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AA6DlB,eAAeA,YAAY;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}