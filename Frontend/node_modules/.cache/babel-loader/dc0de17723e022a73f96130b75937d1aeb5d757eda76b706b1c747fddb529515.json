{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dipesh goel\\\\OneDrive - iitkgp.ac.in\\\\Projects\\\\Random_Quote\\\\Frontend\\\\src\\\\components\\\\ThirdPartyQuoteDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThirdPartyQuoteDisplay = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\n  const [firstQuoteFetched, setFirstQuoteFetched] = useState(false); // Track whether the first quote is fetched\n\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []); // Fetch the random quote when the component mounts\n\n  const fetchRandomQuote = () => {\n    setLoading(true); // Set loading to true when fetching data\n    // Fetch data from the random quotes API\n    axios.get('https://api.quotable.io/random').then(response => {\n      setRandomQuote(response.data);\n      setLoading(false); // Set loading to false when data is received\n    }).catch(error => {\n      console.error('Error fetching quote:', error);\n      setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\n    });\n  };\n\n  const handleGetRandomQuote = () => {\n    if (firstQuoteFetched) {\n      // If the first quote is fetched, get another quote and update randomQuote\n      fetchRandomQuote();\n    } else {\n      // If the first quote is not fetched, fetch the first quote\n      fetchRandomQuote();\n      setFirstQuoteFetched(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Random Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) // Show loading message while fetching data\n    : randomQuote === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quotes found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"Quote\",\n        children: randomQuote.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Author\",\n        children: [\"- \", randomQuote.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"GetQuoteButton\",\n        onClick: handleGetRandomQuote,\n        children: firstQuoteFetched && randomQuote ? 'Get Another Quote' : 'Get Quote'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ThirdPartyQuoteDisplay, \"HGm0XWKN1bBwuHTcc4r6wumVxCA=\");\n_c = ThirdPartyQuoteDisplay;\nexport default ThirdPartyQuoteDisplay;\nvar _c;\n$RefreshReg$(_c, \"ThirdPartyQuoteDisplay\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ThirdPartyQuoteDisplay","_s","loading","setLoading","randomQuote","setRandomQuote","firstQuoteFetched","setFirstQuoteFetched","fetchRandomQuote","get","then","response","data","catch","error","console","handleGetRandomQuote","children","fileName","_jsxFileName","lineNumber","columnNumber","className","content","author","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dipesh goel/OneDrive - iitkgp.ac.in/Projects/Random_Quote/Frontend/src/components/ThirdPartyQuoteDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ThirdPartyQuoteDisplay = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [randomQuote, setRandomQuote] = useState(null); // Initialize randomQuote as null\r\n  const [firstQuoteFetched, setFirstQuoteFetched] = useState(false); // Track whether the first quote is fetched\r\n\r\n  useEffect(() => {\r\n    fetchRandomQuote();\r\n  }, []); // Fetch the random quote when the component mounts\r\n\r\n  const fetchRandomQuote = () => {\r\n    setLoading(true); // Set loading to true when fetching data\r\n    // Fetch data from the random quotes API\r\n    axios\r\n      .get('https://api.quotable.io/random')\r\n      .then((response) => {\r\n        setRandomQuote(response.data);\r\n        setLoading(false); // Set loading to false when data is received\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching quote:', error);\r\n        setLoading(false); // Set loading to false even on error to handle the case where no quotes are available\r\n      });\r\n  };\r\n\r\n  const handleGetRandomQuote = () => {\r\n    if (firstQuoteFetched) {\r\n      // If the first quote is fetched, get another quote and update randomQuote\r\n      fetchRandomQuote();\r\n    } else {\r\n      // If the first quote is not fetched, fetch the first quote\r\n      fetchRandomQuote();\r\n      setFirstQuoteFetched(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Random Quote</h3>\r\n      {loading ? (\r\n        <p>Loading...</p> // Show loading message while fetching data\r\n      ) : randomQuote === null ? (\r\n        <p>No quotes found.</p>\r\n      ) : (\r\n        <>\r\n          <h4 className='Quote'>{randomQuote.content}</h4>\r\n          <p className='Author'>- {randomQuote.author}</p>\r\n          <button className=\"GetQuoteButton\" onClick={handleGetRandomQuote}>\r\n            {firstQuoteFetched && randomQuote ? 'Get Another Quote' : 'Get Quote'}\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThirdPartyQuoteDisplay;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}